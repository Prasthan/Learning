Reference link: https://dzone.com/articles/top-20-git-commands-with-examples

git command:
- We must push files from LOCAL AREA to STAGING AREA and STAGING AREA to RPOSITORY AREA

# Create a new repository on new command line:
	git init
	git add README.md
	git commit -m "first commit"
	git remote add origin https://github.com/Prasthan/PizzaHut_webpage.git		<!-- In the part of link, there must be your repository link which is found in
	git push -u origin master								your github. First, we must create a repositiory in github. -->
	
# Push an existing repository from the command line:
	git add remote add origin https://github.com/Prasthan/PizzaHut_webpage.git
	git push -u origin master
			or
	git init
	git status
	git add .
	git commit -m "message"
	git push -u origin master

# In case of failed in pushing:
	git push origin master --force
	git push origin master -f

# If the remote origin already exists, i.e. you have already set it before:
	i) To view or see what/where remotes are set:
		git remote -v
	
	ii) If you want to remove current origin:
		git remote rm origin

1. git config --list    [shows the users]

2. to add or push file to staging area:
	git add filename.txt    [for single file]
	git add filename.txt filename2.txt    [for multiple files]
	git add .    [for all files]  

3. to commit the changes:
	git commit -m "MESSAGE"    [must provide message inside ""]

4. git log    [view commit history]
   git log --oneline    [view in oneline]

5. git checkout #number    [for to go in previous stage]    [#number is we must put hash number here by doing git log or git log --oneline]
   git checkout master    [for to go in original or recent stage]

6. push our code to github:
	git push origin master    [this code pushes the file to github]
	git diff --staged

7. to copy/clone github repo to computer file
	git clone "url"    [you can copy url from github repo]

8. to create a branch:
	git branch    [to view the branches]
	git branch branchname    [in branchname, users can put any name]
	git checkout branchname    [to enter into created branch]
	
	example: git branch new_project    [here, i have created new branch called new_project]
		 git checkout new_project    [now, we enter into new_project branch]
	[If we make mistakes in new_project branch, it won't affect in master branch or main file. We can delete branch in case of mistakes.]
	[If the things goes as requirement, then we can merge it with main file or master branch.]

9. to merge:
	git merge new_project    [to merge with main branch or master branch]
				[to merge into branch, first we have to go to that branch by "git checkout branchname"]

10. to delete branch:
	git branch -d branchname    [from lowercase d, we cannot delete unmerged branch]
	git branch -D branchname    [but from uppercase D, we can delete unmerged branch]

11. to view merger and not merged branch:
	git branch --merged	[shows merged branch]
	git branch --no-merged	[shows not merged branch]
